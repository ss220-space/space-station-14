using System.Linq;
using Content.Shared.Administration;
using Content.Shared.Roles;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.LineEdit;

namespace Content.Client.Administration.UI.Tabs.AdminTab
{
    [GenerateTypedNameReferences]
    [UsedImplicitly]
    public sealed partial class TimePanelWindow : DefaultWindow
    {
        [Dependency]
        private readonly IPrototypeManager _prototypeManager = default!;
        public TimePanelWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            PopulateJobs();

            PlayerNameLine.OnTextChanged += _ => OnFieldChanged();
            PlayerList.OnSelectionChanged += OnPlayerSelectionChanged;
            SubmitButton.OnPressed += SubmitButtonOnOnPressed;
            SubmitButton.Disabled = SubmitOverallButton.Disabled = true;
            SubmitOverallButton.OnPressed += SubmitOverallButtonOnOnPressed;
            MinutesLine.OnTextChanged += UpdateButtonsText;
            MinutesLine.OnTextChanged += _ => OnFieldChanged();
            RoleOption.OnItemSelected += args => RoleOption.SelectId(args.Id);
            HourButton.OnPressed += _ => AddMinutes(60);
            DayButton.OnPressed += _ => AddMinutes(1440);
            WeekButton.OnPressed += _ => AddMinutes(10080);
            MonthButton.OnPressed += _ => AddMinutes(43200);
        }

        private void PopulateJobs()
        {
            var jobs = _prototypeManager.EnumeratePrototypes<JobPrototype>().ToList();
            var i = 0;
            foreach (var job in jobs)
            {
                RoleOption.AddItem(job.LocalizedName);
                RoleOption.SetItemMetadata(i++, job.PlayTimeTracker);
            }
        }

        private bool TryGetMinutes(string str, out uint minutes)
        {
            if (string.IsNullOrWhiteSpace(str))
            {
                minutes = 0;
                return true;
            }

            return uint.TryParse(str, out minutes);
        }

        private void AddMinutes(uint add)
        {
            if (!TryGetMinutes(MinutesLine.Text, out var minutes))
                return;

            MinutesLine.Text = $"{minutes + add}";
            OnFieldChanged();
            UpdateButtons(minutes + add);
        }

        private void UpdateButtonsText(LineEditEventArgs obj)
        {
            if (!TryGetMinutes(obj.Text, out var minutes))
                return;
            UpdateButtons(minutes);
        }

        private void UpdateButtons(uint minutes)
        {
            HourButton.Text = $"+1h ({minutes / 60})";
            DayButton.Text = $"+1d ({minutes / 1440})";
            WeekButton.Text = $"+1w ({minutes / 10080})";
            MonthButton.Text = $"+1M ({minutes / 43200})";
        }

        private void OnFieldChanged()
        {
            var state = string.IsNullOrEmpty(PlayerNameLine.Text) || string.IsNullOrEmpty(MinutesLine.Text);
            SubmitButton.Disabled = state;
            SubmitOverallButton.Disabled = state;
        }

        public void OnPlayerSelectionChanged(PlayerInfo? player)
        {
            PlayerNameLine.Text = player?.Username ?? string.Empty;
            OnFieldChanged();
        }

        private void SubmitButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
        {
            var selectedRole = (string?) RoleOption.SelectedMetadata;
            if (string.IsNullOrWhiteSpace(selectedRole))
                return;

            IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand(
                $"playtime_addrole \"{PlayerNameLine.Text}\" \"{CommandParsing.Escape(selectedRole)}\" {MinutesLine.Text}");
        }

        private void SubmitOverallButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
        {
            IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand(
                $"playtime_addoverall \"{PlayerNameLine.Text}\" {MinutesLine.Text}");
        }
    }
}
