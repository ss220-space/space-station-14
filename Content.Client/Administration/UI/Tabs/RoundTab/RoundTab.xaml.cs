using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;

namespace Content.Client.Administration.UI.Tabs.RoundTab
{
    [GenerateTypedNameReferences]
    public sealed partial class RoundTab : Control
    {
        [Dependency] private readonly IConfigurationManager _config = default!;
        public RoundTab()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _config.OnValueChanged(CCVars.DelayEnabled, StateChanged, true);
            Delay.OnPressed += ButtonClicked;
        }

        private void StateChanged(bool value)
        {
            Delay.Pressed = value;
        }

        // Extra check
        private void ButtonClicked(BaseButton.ButtonEventArgs args)
        {
            Delay.Pressed = _config.GetCVar(CCVars.DelayEnabled);
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _config.UnsubValueChanged(CCVars.OocEnabled, StateChanged);
            }
        }
    }
}
