// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt

using System.Linq;
using Content.Shared.CartridgeLoader.Cartridges;
using Content.Shared.Messenger;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.CartridgeLoader.Cartridges.Messenger;

[GenerateTypedNameReferences]
public sealed partial class MessengerUiFragment : BoxContainer
{
    public event Action<uint, string>? OnMessageSendButtonPressed;
    public event Action<uint>? OnHistoryViewPressed;
    public event Action<bool>? OnBackButtonPressed;

    public uint CurrentChat;
    public string? SearchString;

    public MessengerUiFragment()
    {
        RobustXamlLoader.Load(this);

        Orientation = LayoutOrientation.Vertical;
        HorizontalExpand = true;
        VerticalExpand = true;

        SendButton.OnPressed += _ =>
        {
            OnMessageSendButtonPressed?.Invoke(CurrentChat, MessageInput.Text);
            MessageInput.Clear();
        };

        BackButton.OnPressed += _ =>
        {
            OnBackButtonPressed?.Invoke(true);
        };
    }

    public void UpdateChatsState(MessengerUiState messengerUiState)
    {
        ChatsContainer.RemoveAllChildren();

        var chatsSorted = messengerUiState.Chats.Select(val => val.Value).OrderBy(c => c.SortNumber).ToList();

        if (SearchString != null)
        {
            chatsSorted = chatsSorted
                .Where(messengerChatUiState => messengerChatUiState.Name.ToLower().Contains(SearchString)).ToList();
        }

        foreach (var chat in chatsSorted)
        {
            var lastMessage = "";
            var chatName = ChatName(messengerUiState, chat);

            if (chat.LastMessage != null &&
                messengerUiState.Messages.TryGetValue(chat.LastMessage.Value, out var lastMsg))
            {
                if (lastMsg.Text != "")
                    lastMessage = $"{lastMsg.Text}";
            }

            ChatsContainer.AddChild(new MessengerUiChatItem(chatName, lastMessage, _ =>
            {
                CurrentChat = chat.Id;
                OnHistoryViewPressed?.Invoke(chat.Id);
            }, chat.NewMessages));
        }

        ChatNameLabel.Visible = false;
        BackButton.Visible = false;
        MessageInput.Visible = false;
        SendButton.Visible = false;
        ErrorLabel.Visible = false;
    }

    private static string ChatName(MessengerUiState messengerUiState, MessengerChatUiState chat)
    {
        if (chat.Kind != MessengerChatKind.Contact)
            return chat.Name;

        foreach (var chatMember in chat.Members)
        {
            if (messengerUiState.ClientContact.Id == chatMember)
                continue;

            if (!messengerUiState.Contacts.TryGetValue(chatMember, out var contact))
                continue;

            if (contact.Name != null)
                return contact.Name;
        }

        return chat.Name;
    }

    public void UpdateChatHistoryState(MessengerUiState messengerUiState)
    {
        ChatsContainer.RemoveAllChildren();


        if (messengerUiState.Chats.TryGetValue(CurrentChat, out var chat))
        {
            chat.NewMessages = false;

            foreach (var msgId in chat.Messages)
            {
                if (!messengerUiState.Messages.TryGetValue(msgId, out var message))
                    continue;

                if (SearchString != null && !message.Text.ToLower().Contains(SearchString))
                    continue;

                if (message.FromContactId == messengerUiState.ClientContact.Id)
                {
                    var messageItem = new MessengerUiMessageItem($"{message.Text}", message.Time,
                        Label.AlignMode.Right, HAlignment.Right);
                    ChatsContainer.AddChild(messageItem);
                }
                else
                {
                    var messageItem = new MessengerUiMessageItem($"{message.Text}", message.Time,
                        Label.AlignMode.Left, HAlignment.Left);
                    ChatsContainer.AddChild(messageItem);
                }
            }

            ChatNameLabel.Text = ChatName(messengerUiState, chat);
        }

        ChatNameLabel.Visible = true;
        BackButton.Visible = true;
        MessageInput.Visible = true;
        SendButton.Visible = true;
        ErrorLabel.Visible = false;
    }

    public void DisplayError(string err)
    {
        ChatsContainer.RemoveAllChildren();

        ChatNameLabel.Visible = false;
        BackButton.Visible = false;
        MessageInput.Visible = false;
        SendButton.Visible = false;
        ErrorLabel.Visible = true;
        ErrorLabel.Text = err;
    }
}
