// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using System.Numerics;
using Content.Client.Humanoid;
using Content.Client.Inventory;
using Content.Shared.GameTicking;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client.SS220.CriminalRecords.UI;

[GenerateTypedNameReferences]
public sealed partial class CharacterVisualisation : BoxContainer
{
    private readonly IEntityManager _entMan;
    private readonly IPrototypeManager _prototype;
    private EntityUid _previewDummy;

    private readonly SpriteView _face;
    private readonly SpriteView _side;


    public CharacterVisualisation()
    {
        RobustXamlLoader.Load(this);

        _entMan = IoCManager.Resolve<IEntityManager>();
        _prototype = IoCManager.Resolve<IPrototypeManager>();

        _face = new SpriteView() { Scale = new Vector2(5, 5) };
        _side = new SpriteView() { Scale = new Vector2(5, 5), OverrideDirection = Direction.East };

        AddChild(_face);
        AddChild(_side);
    }

    public void ResetCharacterSpriteView()
    {
        _face.SetEntity(null);
        _side.SetEntity(null);
        _entMan.DeleteEntity(_previewDummy);
    }

    public void SetupCharacterSpriteView(HumanoidCharacterProfile profile, string jobPrototype)
    {
        HumanoidAppearanceSystem appearanceSystem = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<HumanoidAppearanceSystem>();

        _entMan.DeleteEntity(_previewDummy);

        _previewDummy = _entMan.SpawnEntity(_prototype.Index<SpeciesPrototype>(profile.Species).DollPrototype, MapCoordinates.Nullspace);
        appearanceSystem.LoadProfile(_previewDummy, profile);
        GiveDummyJobClothes(_previewDummy, jobPrototype, profile);

        _face.SetEntity(_previewDummy);
        _side.SetEntity(_previewDummy);
    }
    private void GiveDummyJobClothes(EntityUid dummy, string jobPrototype, HumanoidCharacterProfile profile)
    {
        ClientInventorySystem inventorySystem = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<ClientInventorySystem>();

        // ReSharper disable once NullCoalescingConditionIsAlwaysNotNullAccordingToAPIContract (what is resharper smoking?)
        var job = _prototype.Index<JobPrototype>(jobPrototype ?? SharedGameTicker.FallbackOverflowJob);

        if (job.StartingGear != null && inventorySystem.TryGetSlots(dummy, out var slots))
        {
            var gear = _prototype.Index<StartingGearPrototype>(job.StartingGear);

            foreach (var slot in slots)
            {
                var itemType = gear.GetGear(slot.Name, profile);
                if (inventorySystem.TryUnequip(dummy, slot.Name, out var unequippedItem, true, true))
                {
                    _entMan.DeleteEntity(unequippedItem.Value);
                }

                if (itemType != string.Empty)
                {
                    var item = _entMan.SpawnEntity(itemType, MapCoordinates.Nullspace);
                    inventorySystem.TryEquip(dummy, item, slot.Name, true, true);
                }
            }
        }
    }
}
