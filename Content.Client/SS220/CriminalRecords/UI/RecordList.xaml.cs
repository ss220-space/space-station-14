// © SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Content.Shared.Roles;
using Content.Shared.SS220.CriminalRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System.Linq;
using System.Text.RegularExpressions;

namespace Content.Client.SS220.CriminalRecords.UI;

[GenerateTypedNameReferences]
public sealed partial class RecordList : ScrollContainer
{
    private const int INITIAL_ITEM_POOL_SIZE = 80;
    const float ADDITIONAL_COLOR_CHANNEL_VALUE = 0.25f;
    private int _active_pool = 0;

    private readonly Color _defaultEntryColor = Color.FromHex("#1C1C21");
    private readonly Color _altEntryColor = Color.FromHex("#151519");
    private readonly Regex _recordNameRegex = new Regex(@"(?i)ё");

    public string Filter = "";
    public List<string> ExtraFilters = new();
    public List<string> Groups = new();
    public Dictionary<string, RecordListGroup> RecordListGroups = new();

    private readonly IEntitySystemManager _sysMan;
    private readonly IPrototypeManager _prototype;
    private readonly SpriteSystem _sprite;

    private Dictionary<(NetEntity, uint), CriminalRecordShort> _records = new();
    private List<RecordListEntry> _itemPool = new();
    private RecordListEntry? _selected;

    public event Action<ItemEventArgs>? OnItemSelected;
    public event Action<ItemEventArgs>? OnItemDeselected;
    public bool IsPopulating { get; private set; } = false;
    //public event Action<ItemEventArgs>? OnItemHover;

    private Dictionary<string, DepartmentPrototype> _jobIdToDepartment = new();
    private const string NoDeraptmentGroupId = "NoDepartment";
    private const string CryodGroupId = "Cryod";
    private const string CriminalGroupId = "Criminal";
    private const string RecordNameReplacement = "е";

    private static readonly HashSet<string> DepartmentBlacklist = new()
    {
        "Specific",
    };

    public RecordList()
    {
        RobustXamlLoader.Load(this);

        _sysMan = IoCManager.Resolve<IEntitySystemManager>();
        _prototype = IoCManager.Resolve<IPrototypeManager>();
        _sprite = _sysMan.GetEntitySystem<SpriteSystem>();

        EnsurePoolSize(INITIAL_ITEM_POOL_SIZE);
        MapJobsToDepartments();
        ParseDepartmentGroups();
    }

    private void MapJobsToDepartments()
    {
        var departments = _prototype.EnumeratePrototypes<DepartmentPrototype>().ToList();
        departments.Sort((a, b) => a.Sort.CompareTo(b.Sort));

        foreach (var department in departments)
        {
            if (DepartmentBlacklist.Contains(department.ID))
                continue;

            foreach (var roleId in department.Roles)
            {
                if (_jobIdToDepartment.ContainsKey(roleId))
                    continue;

                _jobIdToDepartment.Add(roleId, department);
            }
        }
    }

    private void ParseDepartmentGroups()
    {
        var departments = _prototype.EnumeratePrototypes<DepartmentPrototype>().ToList();
        departments.Sort((a, b) => a.ID.CompareTo(b.ID));

        // Group for people with criminal status
        var criminalGroup = new RecordListGroupCriminal();
        criminalGroup.Setup("", Color.White);
        OptionContainer.AddChild(criminalGroup);
        criminalGroup.Visible = false;
        RecordListGroups.Add(CriminalGroupId, criminalGroup);

        foreach (var department in departments)
        {
            // make brighter cuz pure red/blue are too dark to be readable
            var color = department.Color;
            color = color.WithRed(MathF.Min(color.R + ADDITIONAL_COLOR_CHANNEL_VALUE, 1));
            color = color.WithGreen(MathF.Min(color.G + ADDITIONAL_COLOR_CHANNEL_VALUE, 1));
            color = color.WithBlue(MathF.Min(color.B + ADDITIONAL_COLOR_CHANNEL_VALUE, 1));

            var group = new RecordListGroupBasic();
            group.Setup(Loc.GetString("department-" + department.ID), color);
            OptionContainer.AddChild(group);
            group.Visible = false;
            RecordListGroups.Add(department.ID, group);
        }

        // Group for jobs without department
        var noDepGroup = new RecordListGroupBasic();
        noDepGroup.Setup(Loc.GetString("criminal-records-ui-no-department"), Color.White);
        OptionContainer.AddChild(noDepGroup);
        noDepGroup.Visible = false;
        RecordListGroups.Add(NoDeraptmentGroupId, noDepGroup);

        // Group those who went to cryo
        var cryoGroup = new RecordListGroupBasic();
        cryoGroup.Setup(Loc.GetString("criminal-records-ui-cryo-group"), Color.LightGreen);
        OptionContainer.AddChild(cryoGroup);
        cryoGroup.Visible = false;
        RecordListGroups.Add(CryodGroupId, cryoGroup);
    }

    public void EnsurePoolSize(int count)
    {
        var toAdd = count - _itemPool.Count;
        for (int i = 0; i < toAdd; i++)
        {
            var entry = new RecordListEntry(_prototype, _sprite, this);
            _itemPool.Add(entry);
            entry.Pressed += OnItemPressed;
        }
    }

    public void SetActivePool(int count)
    {
        if (_active_pool == count)
            return;

        if (count > _itemPool.Count)
            EnsurePoolSize(count);

        for (int i = 0; i < _itemPool.Count; i++)
        {
            if (i <= _active_pool - 1 && i <= count - 1)
                continue;

            if (!_itemPool.TryGetValue(i, out var item))
                continue;

            if (i <= count - 1)
            {
                // if (item.Parent == null)
                //     OptionContainer.AddChild(item);
                continue;
            }

            if (i <= _active_pool - 1)
            {
                if (item.Parent != null)
                    item.Parent.RemoveChild(item);
            }
        }

        _active_pool = count;
    }

    public void TryDeselect(RecordListEntry item)
    {
        if (item != _selected)
            return;

        _selected = null;
        item.SetSelectionVisuals(false);

        if (IsPopulating)
            return;

        if (item.Metadata is not RecordMetadata cast)
            return;

        var args = new ItemEventArgs(cast);
        OnItemDeselected?.Invoke(args);
    }

    public void Select(RecordListEntry item)
    {
        if (_selected == item)
            return;

        if (_selected != null)
            TryDeselect(_selected);

        _selected = item;
        item.SetSelectionVisuals(true);

        if (IsPopulating)
            return;

        if (item.Metadata is not RecordMetadata cast)
            return;

        var args = new ItemEventArgs(cast);
        OnItemSelected?.Invoke(args);
    }

    public void ClearSelected()
    {
        if (_selected != null)
            TryDeselect(_selected);
    }

    private bool DoesRecordPassFilter(CriminalRecordShort record, string filter, out FilterMatchType match)
    {
        match = FilterMatchType.Default;
        if (string.IsNullOrWhiteSpace(filter))
            return true;

        if (record.DNA.Contains(filter, StringComparison.OrdinalIgnoreCase))
        {
            match = FilterMatchType.DNA;
            return true;
        }

        if (record.Fingerprints.Contains(filter, StringComparison.OrdinalIgnoreCase))
        {
            match = FilterMatchType.Fingerprint;
            return true;
        }

        // YEAH IT'S REGEX TIME!!!
        // We are replacing any matching "ё" by a "е" character in both filter and record.Name and then check if it passes.
        // May be inefficient because of regex, but it'll work.
        var convertedRecordName = _recordNameRegex.Replace(record.Name, RecordNameReplacement);
        var convertedFilter = _recordNameRegex.Replace(filter, RecordNameReplacement);
        if (convertedRecordName.Contains(convertedFilter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    public void SetItems(Dictionary<(NetEntity, uint), CriminalRecordShort>? listing, (NetEntity, uint)? selected)
    {
        _records = listing ?? new();
        EnsurePoolSize(_records.Count);
        RebuildList(selected);
    }

    public void RebuildList()
    {
        (NetEntity, uint)? selectionKey;
        if (_selected != null && _selected.Metadata is RecordMetadata cast)
            selectionKey = cast.Key;
        else
            selectionKey = null;

        RebuildList(selectionKey);
    }

    public string DicideGroup(CriminalRecordShort record)
    {
        if (record.IsInCryo)
            return CryodGroupId;

        if (record.LastCriminalRecord != null && record.LastCriminalRecord.RecordType.HasValue)
            return CriminalGroupId;

        if (string.IsNullOrEmpty(record.JobPrototype))
            return NoDeraptmentGroupId;

        if (!_jobIdToDepartment.TryGetValue(record.JobPrototype, out var department))
            return NoDeraptmentGroupId;

        if (!RecordListGroups.ContainsKey(department.ID))
            return NoDeraptmentGroupId;

        return department.ID;
    }

    public void RebuildList((NetEntity, uint)? newSelection)
    {
        IsPopulating = true;

        (NetEntity, uint)? selectionKey = newSelection;
        if (selectionKey == null && _selected != null)
            TryDeselect(_selected);

        Dictionary<RecordListGroup, int> usedGroups = new();

        var usedItems = 0;
        foreach (var (key, record) in _records)
        {
            if (!DoesRecordPassFilter(record, Filter, out var matchType))
                continue;

            if (!_itemPool.TryGetValue(usedItems, out var entry))
                continue;

            var groupId = DicideGroup(record);
            if (!RecordListGroups.TryGetValue(groupId, out var group))
                continue;

            entry.SetupEntry(record, matchType);
            entry.Metadata = new RecordMetadata(key, record);
            if (entry.Parent != group.RecordContainer)
            {
                entry.Parent?.RemoveChild(entry); // clear old parent or it will crash
                group.RecordContainer.AddChild(entry);
            }
            usedItems++;

            entry.DefaultBgColor = _defaultEntryColor;

            if (usedGroups.ContainsKey(group))
            {
                var newCount = usedGroups[group] + 1;
                usedGroups[group] = newCount;

                if (newCount % 2 == 0)
                    entry.DefaultBgColor = _altEntryColor;
            }
            else
            {
                usedGroups.Add(group, 1);
            }
            entry.UpdateVisuals();

            if (selectionKey != null && selectionKey.Equals(key))
            {
                Select(entry);
            }
        }

        foreach (var group in RecordListGroups.Values)
        {
            group.Visible = usedGroups.ContainsKey(group);
        }

        SetActivePool(usedItems);

        IsPopulating = false;
    }

    public void OnItemPressed(GUIBoundKeyEventArgs args, RecordListEntry item)
    {
        if (_selected != item)
            Select(item);
        else
            ClearSelected();
    }

    public sealed class ItemEventArgs
    {
        public RecordMetadata Metadata;

        public ItemEventArgs(RecordMetadata metadata)
        {
            Metadata = metadata;
        }
    }

    public struct RecordMetadata
    {
        public (NetEntity, uint) Key;
        public CriminalRecordShort Record;

        public RecordMetadata((NetEntity, uint) key, CriminalRecordShort record)
        {
            Key = key;
            Record = record;
        }
    }

    public enum FilterMatchType
    {
        Default,
        DNA,
        Fingerprint,
    }
}
