// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt

using Content.Client.Paper;
using Content.Client.Paper.UI;
using Content.Shared.Paper;
using Content.Shared.SS220.ButtScan;
using Robust.Client.AutoGenerated;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Numerics;

namespace Content.Client.SS220.ButtScan.UI;

[GenerateTypedNameReferences]
public sealed partial class ButtScanWindow : PaperWindow
{
    [Dependency] private readonly IResourceCache _resCache = default!;

    private readonly Vector2 _buttRectSize = new Vector2(300, 300);
    private readonly Thickness _buttRectMargin = new(25, 25);

    public readonly TextureRect ButtTextureRect;

    public ButtScanWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var layers = new Control
        {
            HorizontalExpand = true,
            VerticalExpand = true
        };

        ButtTextureRect = new TextureRect
        {
            Stretch = TextureRect.StretchMode.Scale,
            CanShrink = true,
            SetSize = _buttRectSize,
            Margin = _buttRectMargin,
            HorizontalAlignment = HAlignment.Center,
            VerticalAlignment = VAlignment.Center
        };

        PaperBackground.AddChild(layers);
        ScrollingContents.Orphan();
        layers.AddChild(ButtTextureRect);
        layers.AddChild(ScrollingContents);
    }

    public void InitVisuals(EntityUid owner, ButtScanComponent scan, PaperVisualsComponent visuals)
    {
        base.InitVisuals(owner, visuals);

        var contentImage = _resCache.GetResource<TextureResource>(scan.ButtTexturePath);
        ButtTextureRect.Texture = contentImage;
    }

    public new void Populate(SharedPaperComponent.PaperBoundUserInterfaceState state)
    {
        base.Populate(state);
        BlankPaperIndicator.Visible = false;
    }

    // Drag by grabbing anywhere
    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        return DragMode.Move;
    }
}
